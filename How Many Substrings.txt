python 2


#!/bin/python

import sys

def lcp_array(suffix_array, string, n):
    lcp = [0] * n
    inverse_suffix = [0] * n
    
    for i in xrange(0, n):
        inverse_suffix[suffix_array[i][0]] = i
    
    k = 0
    
    for i in xrange(0, n):
        
        if inverse_suffix[i] == n-1:
            k = 0
            continue
        
        j = suffix_array[inverse_suffix[i]+1][0]
        
        while i + k < n and j + k < n and string[i+k] == string[j+k]:
            k += 1
        
        lcp[inverse_suffix[i]] = k
        
        if k > 0:
            k -= 1
    
    return lcp
    

def array_suffix(string, n):
    suffix_array = []
    
    for i in xrange(0, n):
        suffix = string[i:n]
        suffix_array.append((i, suffix))
        
    suffix_array.sort(key=lambda tuples: tuples[1])
    
    return suffix_array 

def count_substrings(string, n):
    suffix_array = array_suffix(string, n)
    array_lcp = lcp_array(suffix_array, string, n)
    
    result = n - suffix_array[0][0]
    
    for i in xrange(1, n):
        result += (n - suffix_array[i][0]) - array_lcp[i-1]
    
    return result
    

n,q = raw_input().strip().split(' ')
n,q = [int(n),int(q)]
s = raw_input().strip()
for a0 in xrange(q):
    left,right = raw_input().strip().split(' ')
    left,right = [int(left),int(right)]
    #print substring(s, left, right)
    sub_s = s[left:right+1]
    s_n = len(sub_s)
    print count_substrings(sub_s, s_n)
    # your code goes here